import os
import sys
import importlib.util
import dtlpy as dl
import glob


def find_most_recent_adapter(model_name, responses_dir):
    """Find the most recent adapter script for a given model name."""
    # Remove any directory prefix from model name
    model_name = model_name.split('/')[-1]

    pattern = os.path.join(responses_dir, f"{model_name}_*.py")
    adapter_files = glob.glob(pattern)

    if not adapter_files:
        raise FileNotFoundError(f"No adapter files found for model '{model_name}'")

    # Sort by filename (which includes timestamp) in descending order
    latest_file = max(adapter_files)
    return os.path.basename(latest_file)


def load_class_from_file(subdir, module_name, class_name):
    """Loads a class dynamically from a module in a subdirectory."""
    # Remove any directory prefix from module name and .py extension if present
    module_name = module_name.split('/')[-1].replace('.py', '')
    module_path = os.path.join(os.path.dirname(__file__), subdir, f"{module_name}.py")

    if not os.path.exists(module_path):
        raise FileNotFoundError(f"Module '{module_name}' not found in '{subdir}'.")

    spec = importlib.util.spec_from_file_location(module_name, module_path)
    module = importlib.util.module_from_spec(spec)
    sys.modules[module_name] = module
    spec.loader.exec_module(module)

    if not hasattr(module, class_name):
        raise AttributeError(f"Class '{class_name}' not found in module '{module_name}'.")

    return getattr(module, class_name)


if __name__ == "__main__":
    model_name = "facebook/detr-resnet-50"
    responses_dir = os.path.join(os.path.dirname(__file__), "responses")

    # Find the most recent adapter script
    adapter_filename = find_most_recent_adapter(model_name.split('/')[-1], responses_dir)
    print(f"Using most recent adapter: {adapter_filename}")

    model_json = {
        "name": "model-adapter",
        "moduleName": adapter_filename,
        "scope": "project",
        "status": "pre-trained",
        "configuration": {"module_name": adapter_filename, "device": "cpu", "model_name": model_name},
        "metadata": {},
    }

    ModelAdapter = load_class_from_file(subdir="responses", module_name=adapter_filename, class_name="HuggingAdapter")
    model_entity = dl.Model.from_json(_json=model_json, client_api=dl.client_api, project=None, package=dl.Package())

    model_app = ModelAdapter(model_entity=model_entity)
    print(f"Loaded class: {model_app}")

    dl.setenv("rc")
    project = dl.projects.get(project_name="Model mgmt demo")
    dataset = project.datasets.get(dataset_name="llama_testing")
    # item = dataset.items.get(item_id="67c961cc084575d04c468719") # photo of a kitchen
    # item = dataset.items.get(item_id="67da8d6da1b8775dbed524f2")  # text only item
    item = dataset.items.get(item_id="67bee79dcb4162a4b84e1ab5")  # image 

    item.annotations.list().delete()
    # returns a list of annotations
    items, annotations = model_app.predict_items(items=[item])

    for annotation in annotations:
        print(annotation)
        
