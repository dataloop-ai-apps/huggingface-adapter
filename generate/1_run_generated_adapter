import os
import sys
import importlib.util
import dtlpy as dl


def load_class_from_file(subdir, module_name, class_name):
    """Loads a class dynamically from a module in a subdirectory."""
    module_path = os.path.join(os.path.dirname(__file__), subdir, f"{module_name}.py")

    if not os.path.exists(module_path):
        raise FileNotFoundError(f"Module '{module_name}' not found in '{subdir}'.")

    spec = importlib.util.spec_from_file_location(module_name, module_path)
    module = importlib.util.module_from_spec(spec)
    sys.modules[module_name] = module
    spec.loader.exec_module(module)

    if not hasattr(module, class_name):
        raise AttributeError(f"Class '{class_name}' not found in module '{module_name}'.")

    return getattr(module, class_name)


if __name__ == "__main__":
    adapter_path = "blip2-opt-2.7b.py"

    model_json = {
        "name": "model-adapter",
        "moduleName": adapter_path,
        "scope": "project",
        "status": "pre-trained",
        "configuration": {
            "module_name": "examples.Salesforce.blip2-opt-2.7b.blip2-opt-2.7b",
            "device": "cpu",
            "model_name": "Salesforce/blip2-opt-2.7b",
        },
        "metadata": {},
    }

    ModelAdapter = load_class_from_file(
        subdir="examples/Salesforce/blip2-opt-2.7b", module_name="blip2-opt-2.7b", class_name="HuggingAdapter"
    )
    model_entity = dl.Model.from_json(_json=model_json, client_api=dl.client_api, project=None, package=dl.Package())

    model_app = ModelAdapter(model_entity=model_entity)
    print(f"Loaded class: {model_app}")

    dl.setenv("rc")
    project = dl.projects.get(project_name="Model mgmt demo")
    dataset = project.datasets.get(dataset_name="llama_testing")
    item = dataset.items.get(item_id="67c961cc084575d04c468719")

    item.annotations.list().delete()
    preds = model_app.predict_items(items=[item])

    for pred in preds:
        print(pred)
        print(pred.annotations.to_json())
